<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
    <entry key="node_file" type="xstring" value="settings.xml"/>
    <config key="flow_stack"/>
    <config key="internal_node_subsettings">
        <entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
    </config>
    <config key="model">
        <entry key="script" type="xstring" value="import knime.scripting.io as knio%%00010import numpy as np%%00010%%00010# VARIABLES %%00010vaccineName = &quot;&quot;    # Almacena el nombre de una VACUNA%%00010vaccines = []       # Almacena el nombre de TODAS las VACUNAS%%00010vaccValues = []     # Almacena los valores de los registros de cada COLUMNA que sera generada%%00010                    # por cada VACUNA presente en la Tabla de Entrada%%00010indexCountry = 0    # Indice de registro de la TABLA%%00010indexCol = 2        # Indice de columna de la TABLA%%00010%%00010%%00010# Convirtiendo la tabla de ENTRADA a dataFrame %%00010df = knio.input_tables[0].to_pandas()%%00010# Obteniendo la longitud de la TABLA (cant. total de registros)%%00010numRows = len(df.index)%%00010%%00010# Iterando cada uno de los REGISTROS presentes en la Tabla%%00010for index, row in df.iterrows():%%00010    # Iterando en cada caracter presente en un REGISTRO%%00010    for c in row['vaccines']:%%00010    # -------------------------------------------------------------------------------------%%00010        # CASO: Si se lee una coma ',', significa que hemos llegado al final del nombre%%00010        #       de una VACUNA%%00010        if c == ',':%%00010        # ---------------------------------------------------------------------------------%%00010            # CASO: Si el nombre de la VACUNA aun no se encuentra en la LISTA DE VACUNAS%%00010            if not(vaccineName in vaccines):%%00010                # Se agrega el nombre de la VACUNA a la LISTA DE VACUNAS%%00010                vaccines.append(vaccineName)%%00010                # Se crea una lista para almacenar los valores de cada uno de los registros%%00010                # con los que contara la COLUMNA de la VACUNA registrada en la LISTA DE %%00010                # VACUNAS. La lista se llenara con ceros '0'%%00010                vaccValues.append(np.zeros(numRows, dtype = int))%%00010        # ---------------------------------------------------------------------------------%%00010%%00010            # Se le asigna el valor de uno '1' a el registro del pais que esta haciendo uso%%00010            # de la VACUNA, cuyo nombre fue leido%%00010            vaccValues[vaccines.index(vaccineName)][indexCountry] = 1   %%00010            # Se vacia la variable de NOMBRE DE VACUNA para almacenar los nombres de las%%00010            # vacunas posteriores%%00010            vaccineName = &quot;&quot;%%00010    # -------------------------------------------------------------------------------------  %%00010        # CASO: Si se lee un solo ESPACIO VACIO dentro de la variable del NOMBRE DE LA VACUNA,%%00010        #       este se elimina%%00010        elif vaccineName == &quot; &quot;:%%00010            # Se vacia la variable de NOMBRE DE VACUNA%%00010            vaccineName = &quot;&quot;%%00010            # Se lee un caracter%%00010            vaccineName = vaccineName + c%%00010    # -------------------------------------------------------------------------------------%%00010        # CASO POR DEFECTO%%00010        else:%%00010            # Se lee un caracter%%00010            vaccineName = vaccineName + c%%00010    # -------------------------------------------------------------------------------------%%00010%%00010%%00010# -----------------------------------------------------------------------------------------%%00010# NOTA: Se agrega esta validacion, debido a que al finalizar la lectura de un REGISTRO, no %%00010# hay un caracter que defina el final del nombre de la ultima VACUNA ENLISTADA%%00010%%00010    # CASO: Si el nombre de la VACUNA aun no se encuentra en la LISTA DE VACUNAS%%00010    if not(vaccineName in vaccines):%%00010        # Se agrega el nombre de la VACUNA a la LISTA DE VACUNAS%%00010        vaccines.append(vaccineName)%%00010        # Se crea una lista para almacenar los valores de cada uno de los registros con los %%00010        # que contara la COLUMNA de la VACUNA registrada en la LISTA DE VACUNAS. La lista se %%00010        # llenara con ceros '0'%%00010        vaccValues.append(np.zeros(numRows, dtype = int))%%00010%%00010    # Se le asigna el valor de uno '1' a el registro del pais que esta haciendo uso de la VACUNA,%%00010    # cuyo nombre fue leido%%00010    vaccValues[vaccines.index(vaccineName)][indexCountry] = 1  %%00010# -----------------------------------------------------------------------------------------%%00010%%00010    # Se aumenta el valor del Indice de REGISTROS por 1%%00010    indexCountry += 1 %%00010    # Se vacia la variable de NOMBRE DE VACUNA%%00010    vaccineName = &quot;&quot;%%00010%%00010# Se generan las COLUMNAS para cada VACUNA de la LISTA DE VACUNAS%%00010for vacc in vaccines:%%00010    # Insercion de la COLUMNA%%00010    df.insert(indexCol, vacc, vaccValues[vaccines.index(vacc)])%%00010    # Se aumenta el valor del Indice de COLUMNAS por 1%%00010    indexCol += 1%%00010%%00010# Convirtiendo el dataFrame a un dataTable e igualandolo a la tabla de SALIDA%%00010knio.output_tables[0] = knio.Table.from_pandas(df)"/>
        <entry key="python3_command" type="xstring" value=""/>
    </config>
    <config key="nodeAnnotation">
        <entry key="text" type="xstring" value="Generar una %%00013%%00010COLUMNA por%%00013%%00010VACUNA"/>
        <entry key="bgcolor" type="xint" value="16777215"/>
        <entry key="x-coordinate" type="xint" value="428"/>
        <entry key="y-coordinate" type="xint" value="119"/>
        <entry key="width" type="xint" value="106"/>
        <entry key="height" type="xint" value="45"/>
        <entry key="alignment" type="xstring" value="CENTER"/>
        <entry key="borderSize" type="xint" value="0"/>
        <entry key="borderColor" type="xint" value="16777215"/>
        <entry key="defFontSize" type="xint" value="9"/>
        <entry key="annotation-version" type="xint" value="20151123"/>
        <config key="styles"/>
    </config>
    <entry key="customDescription" type="xstring" isnull="true" value=""/>
    <entry key="state" type="xstring" value="EXECUTED"/>
    <entry key="factory" type="xstring" value="org.knime.python3.scripting.nodes.script.PythonScriptNodeFactory"/>
    <entry key="node-name" type="xstring" value="Python Script"/>
    <entry key="node-bundle-name" type="xstring" value="KNIME Python 3 - Scripting Nodes"/>
    <entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.python3.scripting.nodes"/>
    <entry key="node-bundle-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
    <entry key="node-bundle-version" type="xstring" value="4.7.1.v202301311311"/>
    <entry key="node-feature-name" type="xstring" value="KNIME Python Integration"/>
    <entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.python3.scripting.feature.group"/>
    <entry key="node-feature-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
    <entry key="node-feature-version" type="xstring" value="4.7.2.v202303231026"/>
    <config key="factory_settings"/>
    <config key="node_creation_config">
        <config key="Input object (pickled)"/>
        <config key="Input table">
            <config key="port_0">
                <entry key="object_class" type="xstring" value="org.knime.core.node.BufferedDataTable"/>
            </config>
        </config>
        <config key="Output table">
            <config key="port_0">
                <entry key="object_class" type="xstring" value="org.knime.core.node.BufferedDataTable"/>
            </config>
        </config>
        <config key="Output image"/>
        <config key="Output object (pickled)"/>
    </config>
    <entry key="name" type="xstring" value="Python Script"/>
    <entry key="hasContent" type="xboolean" value="true"/>
    <entry key="isInactive" type="xboolean" value="false"/>
    <config key="ports">
        <config key="port_1">
            <entry key="index" type="xint" value="1"/>
            <entry key="port_spec_class" type="xstring" value="org.knime.core.data.DataTableSpec"/>
            <entry key="port_object_class" type="xstring" value="org.knime.core.node.BufferedDataTable"/>
            <entry key="port_object_summary" type="xstring" value="Rows: 223, Cols: 26"/>
            <entry key="port_dir_location" type="xstring" value="port_1"/>
        </config>
    </config>
    <config key="filestores">
        <entry key="file_store_location" type="xstring" isnull="true" value=""/>
        <entry key="file_store_id" type="xstring" value="361e5f7c-ce0b-47c3-ad4c-d0a8ea9fb443"/>
    </config>
</config>
